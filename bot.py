import telebot
from telebot import types
import os

TOKEN = '7292986121:AAEcpsXiKfN7qWXAANwMyrZb7BRB5C1L7DA'
bot = telebot.TeleBot(TOKEN)

# –£—Ä–æ–∫–∏ –∏ —Ç–∞–±—ã
lessons = [
    {"video": "—É—Ä–æ–∫01-–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ.mp4"},
    {"video": "—É—Ä–æ–∫02-–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞.mp4"},
    {"video": "—É—Ä–æ–∫03-–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è_–ø–æ—Å–∞–¥–∫–∞.mp4"},
    {"video": "—É—Ä–æ–∫04-–ø—Ä–∞–≤–∞—è_—Ä—É–∫–∞.mp4"},
    {"video": "—É—Ä–æ–∫05-–ª–µ–≤–∞—è_—Ä—É–∫–∞.mp4"},
    {"video": "—É—Ä–æ–∫06-–ü–µ—Ä–≤–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.mp4", "tab": "—É—Ä–æ–∫06 Smoke on the water.pdf"},
    {"video": "—É—Ä–æ–∫07-–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞.mp4", "tab": "—É—Ä–æ–∫07 –ú–∏—Å—Å–∏—è –ù–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞.pdf"},
    {"video": ["—É—Ä–æ–∫08-–ß–∏—Ç–∞–µ–º —Ç–∞–±—ã.mp4", "—É—Ä–æ–∫08-Prayer in C.mp4"], "tab": "—É—Ä–æ–∫8 Prayer In C.pdf"},
    {"video": "—É—Ä–æ–∫09-–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ –ø–∞–ª—å—Ü–µ–≤.mp4", "tab": "—É—Ä–æ–∫09-–õ–µ—Å–Ω–∏–∫.pdf"},
    {"video": "—É—Ä–æ–∫10-–Ω–∞–≤–∞–ª–∏–º –±–∞—Å–∞.mp4", "tab": "—É—Ä–æ–∫10-–ß–µ—Ä–Ω—ã–π –ë—É–º–µ—Ä.pdf"},
    {"video": "—É—Ä–æ–∫11-–°—á–µ—Ç –∏ —Ä–∏—Ç–º.mp4", "tab": "—É—Ä–æ–∫11-–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.pdf"},
    {"video": "—É—Ä–æ–∫12-–í—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∏—Ç–º.mp4", "tab": "—É—Ä–æ–∫12-–ö—É–∫–ª–∞ –ö–æ–ª–¥—É–Ω–∞.pdf"},
    {"video": "—É—Ä–æ–∫13-–ó–∞–∫—Ä–µ–ø–ª—è–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ.mp4", "tab": "—É—Ä–æ–∫13-–ö–æ–Ω—å - –õ—é–±—ç.pdf"},
    {"video": "—É—Ä–æ–∫14-–ò—Ç–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è.mp4"},
    {"video": "—É—Ä–æ–∫15-–†–∞–∑–≤–∏—Ç–∏–µ.mp4"},
]

# –°–ª–æ–≤–∞—Ä—å: user_id -> –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
user_progress = {}

# –ö–Ω–æ–ø–∫–∞ "–£—á–∏—Ç—å—Å—è"
def get_learn_keyboard():
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("–£—á–∏—Ç—å—Å—è üé∏", callback_data="learn")
    markup.add(btn)
    return markup

# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start_message(message):
    user_progress[message.chat.id] = 0
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ üé∏", reply_markup=get_learn_keyboard())

# –ö–Ω–æ–ø–∫–∞ "–£—á–∏—Ç—å—Å—è"
@bot.callback_query_handler(func=lambda call: call.data == "learn")
def send_lesson(call):
    user_id = call.message.chat.id
    step = user_progress.get(user_id, 0)

    if step >= len(lessons):
        bot.send_message(user_id, "üéâ –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —É—Ä–æ–∫–∏! –ú–æ–ª–æ–¥–µ—Ü!")
        return

    lesson = lessons[step]

    videos = lesson["video"]
    if isinstance(videos, str):
        videos = [videos]

    for video in videos:
        path = f"lessons/{video}"
        if os.path.exists(path):
            with open(path, 'rb') as video_file:
                bot.send_video(user_id, video_file, caption=video.replace(".mp4", ""))
        else:
            bot.send_message(user_id, f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {video}")

    # –¢–∞–±—ã
    if "tab" in lesson:
        tab_path = f"lessons/{lesson['tab']}"
        if os.path.exists(tab_path):
            with open(tab_path, 'rb') as tab_file:
                bot.send_document(user_id, tab_file)
        else:
            bot.send_message(user_id, f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∞–±: {lesson['tab']}")

    user_progress[user_id] = step + 1
    bot.send_message(user_id, "–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=get_learn_keyboard())

# –ó–∞–ø—É—Å–∫
bot.polling(none_stop=True)
